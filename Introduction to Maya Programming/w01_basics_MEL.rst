Введение в программирование в Autodesk Maya | W01
=================================================

Основные тезисы
---------------

* Программирование, в отличие от анимации и моделирования, не требует долгой практики. Достаточно понять один раз, что делает та или иная команда и как работает определенная технология, чтобы начать ею пользоваться.
* Программисты - это один из самых ценных ресурсов компаний. Стоит программисту создать средний или сложный проект, который решает важные задачи компании, уровень зависимости компании от этого программиста многократно увеличивается. 
* Формула успеха в изучении программирования это самостоятельный поиск информации для решения определенных задач. Когда программист читает самостоятельно техническую документацию или ищет в интернете решение конкретной проблемы - вся эта информация откладывается в голове качественно и надолго. Помимо найденного ответа программист получает много дополнительной информации, что впоследствии и составляет его знания о программировании. Когда программист просит кого-то дать готовое решение, он разменивает ценный личный опыт на чужой рецепт, который забудется на следующий день. Можно сравнить готовое решение с тем как аниматор просит другого аниматора сделать за него какую-то работу - в итоге работа сделана а аниматор не получил никакого опыта. 
* Не существует программиста который знает все. Обычно вначале изучают принципы программирования и уже затем человек обнаруживает интерес к какой то конкретной области(создание интерфейсов, серверное программирование, программирование игр и т.д.). Технологии постоянно совершенствуются, как и языки программирования. Изучение чего-то нового - это постоянный процесс. Так же невозможно помнить все команды MEL, Python или любого другого языка программирования - достаточно научиться использовать эти команды, и запомнить сайты где можно найти нужную документацию.
* Изучение программирования происходит поэтапно. Можно представить знания в виде слоев - где самый нижний слой - это самый важный слой - знание основных принципов программирования, опора, на которой держатся уже другие слои. Первый слой даже не относится к какому то конкретному языку программирования.
* Написание новой программы - это 60% поиска информации в интернете и планирования программы на листе бумаги. Остальные 40% - это написание самого кода.
* Задача любой программы - решение проблемы. Чтобы быть успешным программистом - надо понимать предметную область и ее проблемы. Чем четче человек понимает - какую задачу он решает в данный момент, тем проще спланировать программу.

Maya
----

* Программирование в Maya имеет много разных направлений. Задачи могут быть как простыми, которые имеют решение в виде скрипта MEL или Python и пишутся за 20 минут (например сделать выделенный объект прозрачным для лучшего обзора сцены), так и очень сложными, на которые тратятся месяцы, а иногда и годы.
* Большинство задач сводятся к одному принципу  - получение данных сцены Maya и их последующая обработка (модификация, экспорт, выдача статистики и т.д.). 
* В отличие от других языков программирования, MEL это язык команд - т.е. он дает минимум возможностей для создания сложных алгоритмов, однако является превосходным средством для быстрого написания скриптов низкой и средней сложности. Вопреки всяким домыслам, Python не вытеснил MEL, который все еще является популярным среди крупных студий. 
* В Maya не существует разделения на MEL команды и Python команды. Есть понятие команды Maya, которая изначально написана на C++ и существует внутри Maya. MEL и Python это две разные обертки для вызова одних и тех же команд.
* В Майа существует нодовая система, принцип которой очень важно понимать. Любая нода - это коробка со скрытым содержимым, которая отвечает за определенное действие. Например нода mesh отрисовывает полигональный объект во вьюпорте, однако без ноды transform мы не сможем перемещать ноду mesh по сцене.  Мы можем соединять ноды между собой, чтобы получить более сложный эффект. У каждой ноды есть атрибуты (входящие и исходящие). Фактически вся работа Майа - это передача данных из одних нод в другие, а так-же анимация атрибутов нод. 

Практические заметки
--------------------

* Чтобы не потерять скрипт из Script Editor в результате аварийного завершения работы Maya - рекомендуется пользоваться внешними редакторами. В качестве редактора для программирования можно использовать один из трех самых популярных в мире редакторов: https://www.sublimetext.com/, https://atom.io/ или https://code.visualstudio.com/.
* Форумы, на которых можно найти ответы на многие вопросы а так-же задать свои собственные вопросы - https://stackoverflow.com/questions/tagged/mel, https://tech-artists.org/latest
* Maya имеет очень удобную документацию. Любую MEL команду можно посмотреть в http://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__Commands_index_html
* В самой Maya для написания скриптов используют Script Editor. Верхняя часть этого редактора - это поле, в котором отображаются все MEL команды, которые соответствуют всем действиям пользователя в Maya. Это очень удобно когда надо вспомнить какую-то команду.
* Не все команды, которые отображаются в верхней части Script Editor, имеют описание в технической документации. 


MEL
===

MEL команда очень проста для понимания. Если вы работали с терминалом Linux / MacOS или командной строкой Windows, синтаксис вам будет знаком и понятен.  Сначала идет сама команда, затем атрибуты, и далее имя объекта, для которого нужно эту MEL команду выполнить. Завершается MEL команда точкой с запятой.

.. code-block:: cpp

    Команда -атрибуты имяOбъекта;

    move -relative 2 0 0 pSphere1;

При выполнении команды MEL в Script Editor - команда автоматически удаляется из редактора. Чтобы команда оставалась на месте - необходимо ее выделить (как обычный текст), причем будет выполнена именно выделенная команда - остальной код останется нетронутым. Самый удобный способ запустить MEL команду - это выделить нужный участок кода (или весь код Ctrl+A), и на цифровой клавиатуре нажать Enter.

Скрипт, написанный в Script Editor - можно выделить и средней кнопкой мышки перенести на shelf.  Так же можно создать marking menu с собственными скриптами (Windows -> Settings/Preferences  -> Marking Menu Editor). 

Переменные
----------

Для хранения информации используются переменные. В MEL они начинаются со знака доллара и далее следует название (абсолютно любое). Например:

.. code-block:: cpp

    string $myName = “Roman”;
    int $myAge = 30;
    float $PI = 3.14;
    $someNumber  = 13;

В MEL программист должен указывать тип данных, с которыми он работает. MEL так же позволяет объявлять переменные без типа, однако это считается плохим подходом в языке MEL, поскольку может привести к непредвиденным ошибкам и добавит сложности в изучении этого языка. 

В MEL существуют следующие типы данных: 

* int (целочисленные, например  2, 44, 23)
* float (с плавающей точкой, например 2.34, 77.5)
* string (текст, например “hello”, “mel is fun”)
* vector (вектор, например <<2 ,5, 0>>)
* matrix (матрицы, например <<1,2,3; 4,5,7; 7,8,9>>)

Рекомендуется давать интуитивно понятные названия переменным, так как это очень сильно упрощает чтение кода. Когда вы напишите сложный скрипт, и вернетесь к нему через месяц чтобы продолжить его улучшать - вы прочувствуете на сколько правильное наименование переменных важно и как это облегчает жизнь. 

Так-же мы можем назначить одной переменной значение другой переменной, однако тип данных у них должен совпадать.

.. code-block:: cpp

    string $myName = “Roman”;
    string $BBB = $myName; // $BBB теперь “Roman”


Некоторые команды MEL возвращают определенный результат (например проверка существования объекта в сцене) и чтобы сохранить этот результат в переменную, достаточно этой переменной присвоить саму команду, заключенную в одинарных обратных кавычках (` - под знаком ~), например`:

.. code-block:: cpp

    //Проверяет существует ли объект в сцене. Если да - возвращает 1, иначе 0
    //Результат команды objExists (1 или 0) мы сохраним в переменную $inScene
	int $inScene = `objExists pSphere1`; 

Для того, чтобы проверить, какое значение в переменной - мы можем это значение вывести в верхней части Script Editor. Для этого используется команда print

.. code-block:: cpp

    //Напечатает: 1
	print($inScene); 

