Python. Introduction
====================

Что такое Python?

* Проблемы с объявлениями переменных и их повторным использованием
* Путанница с типами переменных
* Сложное объявление функций
* Фигурные скобки и точки с запятой
* Сложный синтаксис комманд
* Ограниченность в возможностях

ЗАБУДЬТЕ обо всем этом. Посольку Python отныне наш друг, который никогда не надоест и которого мы будем ставить в пример другим языкам программирования.

Представьте себе художника, который долго и упорно рисует линии с помощью карандаша и линейки, тщательно обводит контуры, часто пользуется стеркой, не может нарисовать качественные тени так как пользуется механическим карандашом и тратит на рисунок недели, перерисовывая по несколько раз некоторые части. 
Так вот Python это художник, который несколькими мазками маслом на холсте получает уже готовую картину, красивую и элегантную, ничего лишнего и сложного, но в то же время захватывающую.


.. figure:: res/python-logo-generic.svg
    :align: left
    :alt: alternate text
    :figclass: align-center



Заметки
-------

* Python, в отличие от MEL - это очень распространенный язык программирования. Его используют в научных исследованиях, в программирование графики, веб-сайтов, баз данных, машинного обучения, распознавания изображений и т.д. Научившись пользоваться Python, скажем, в 3D графике, потом очень легко перейти на другие направления, поскольку весь синтаксис остается неизменным. 
* Чтобы в Maya начать пользоваться Python, достаточно в Script Editor создать вкладку Python и начать писать программу. 
* Поскольку Python язык очень обширный, чтобы не перегружать скрипты лишними (о чем пользователь никогда не узнает) данными, изначально нам доступны базовые команды. Скажем, мы не можем пользоваться математическими функциями пока не подключим сами модуль math, или мы не сможем работать с файлами операционной системы, пока не подключи модуль os. Все эти модули уже доступны в python и могут быть легко подключены простой командой:

.. code-block:: python

    import math
    import os

* По умолчанию Python имеет большое число библиотек, но еще больше библиотек можно найти в интернете, легко скачать и начать использовать в Maya, в 3D Max либо в качестве полноценной отдельной комманды. 
* Поскольку Python в Maya это отдельный язык программирования, MEL команды ему не доступны, пока мы не подключим специалный модуль **maya.cmds**

.. code-block:: python

    import maya.cmds 

* Иногда модули имеют длинные и сложные названия. Однако для доступа к их функциям нам не обязательно каждый раз прописывать длинные названия. Достаточно использовать ключевое слово as и указать, какое имя мы хотим использовать вместо длинного имени модуля.

.. code-block:: python

    import maya.cmds as mc 

    mc.some_mel_command()

    import someModule.subModule.anotherSubmodule as f

    f.someFunction()

* В отличие от MEL, команды которого похожи на команды терминала Linux или MacOS, Python устроен проще. Когда мы вызываем mel команду, мы к ней обращаемся через maya.cmds и все аргументы пишем в скобках, каждый аргумент отделяем запятой и ставим знак равно. 

.. code-block:: python

    import maya.cmds

    maya.cmds.polyCube(sx=10, sy=15, sz=5, h=20)

* Команды Python не завершаются точкой запятой. Точка с запятой используется только в том случае, если мы хотим на той же строке написать уже другую команду. В Python вообще отсутствуют точка с запятой и фигурные скобки. Весь синтаксис основан на отступах. Скажем, при обявлении функции мы не ставим фигурные скобки, а просто на следующей строке ставим отступ в 4 пробела (или 1 раз tab), и таким образом мы дадим понять Python что это внутренний блок кода нашей функции. Как только мы перестанем ставить отступы - значит мы вернулись на уровень вверх.

.. code-block:: python

    def myFunction(): # так мы определяем функцию
        print "yo"

* Начиная с 2017 версии, Maya использует Python версии 3, что дает нам новые возможности. До Maya 2017 версии Python везде 2.7. Надо об этом помнить, и когда вы используете команду, синтаксис которой в версии 3 слегка изменился - Maya выдаст вам об этом сообщение (иногда ошибку).
* Поскольку python это очень популярный язык программирования, очень легко найти информацию о решении практически любой задачи или проблемы на этом языке. Самый популярный ресурс дял поиска ответов - все тот же https://stackoverflow.com/questions/tagged/python.
* Саму документацию Python и все об этом языке можно найти на официальном сайте https://www.python.org/ либо https://www.w3schools.com/python/default.asp
* Практически все MEL команды, которые описаны в документации Maya, имеют Python версию описания с примерами. Достаточно открыть любую MEL команду в справочние и сверху справа нажать на ссылку "Python", перейдя в python версию команды. 
* Если вы исользуете один из трех редакторов (см MEL памятку), в каждом из них можно установить отдельное расширение Python - позволяющее редактору подсвечивать ошибки в коде. Я этим не пользусь т.к. не люблю когда весь текст мигает всевозможными цветами. 
* В Python есть глобальные переменные, но их использование обычно сводится к минимуму.
* По сравнению с MEL, в python команде (когда мы вызываем команды Maya), объект (для которого нужно применить команду) - пишется вначале

Практические Заметки
====================

* Для того чтобы в Maya начать пользоваться Python, достаточно открыть Script Editor, вкладку Python и писать свой код. Чтобы начать пользоваться MEL командами, необходимо подключить модуль maya.cmds

.. code-block:: python

    import maya.cmds as cmds

* Структура команды Python довольно таки проста. Скажем, если мы хотим запустить mel команду либо вызвать какую-то нашу функцию, выглядеть это будет всегда одинаково:

.. code-block:: python

    # Комманда (аргумент = значение, другойАргумент = значение, ... )

    Import maya.cmds as cmds

    cmds.polyCube(h=10, sx=2, sy=2, sz=5, n=”myCube”)

    myOldFunction() # вызвали функцию без аргументов. 

    myFunction(x=1, y=2, z=3)

Комментарии
-----------

Коментарии в Python по аналогии с MEL могут быть двух видов - однострочные и многострочные, с той разницей что однострочные коментарии начинаются с символа # а многострочные заключаются в тройные ковычки (Можно использовать как двойные ковычки “ так и одинарные ‘ ).

.. code-block:: python

    “””
    Строка 1
    Строка 2
    “””

    some Python Code  #Мой комментарий


Переменные
----------

Переменные - самое интересное! В Python забудьте о проблемах с типами переменных. Чтобы создать переменную - достаточно написать ее имя (безусловно имя должно отличаться от зарезервированных в Python слов как for, in, break и т.д.) и указать значение. 

.. code-block:: python

    a = 3
    b = 2.3
    c = “Dog”
    d = [1, 2, 3] #массив
    b = “Cat” #мы легко переопределили переменную, теперь она хранит текст

Иногда мы можем не знать за ранее, что мы хотим хранить в нашей переменной и какой тип данных там будет. У нас есть возможность зарезервировать переменню, присвоив ей значение None. None это фактически пустота. Мы присваиваем переменной пустоту чтобы затем ее чем-то заполнить. 

.. code-block:: python

    a = None # Теперь мы можем в дальнейшем присвоить a какое то значение.

Для чего None нужен вообще тогда? Есть огромное число идей как можно использовать None, одна из них - после вычислений проверить переменную, которая вместо числа имеет значение None и предотвратить выполнение оставшегося кода (от греха подальше). Например: 

.. code-block:: python

    If a == None:
        break

Тип переменных можно изменять по ходу программы. Например имея переменную a = “123” - которая является текстом, я могу ее превратить в int или float:

.. code-block:: python

    a = “123”
    b  = int(a) #теперь я могу проводить вычисления с ”a”

Это очень важный момент, поскольку такое приходится делать довольно таки часто, особенно если вы считываете информацию из внешних источников. Например если я хочу взять информацию о высоте из текстового здания, я получу “40” которая будет строкой. Чтобы производить математиеские вычисления - я преобразую строку в число float(“40”).  Конечно я не смогу перевести в число любую строку, т.к. “Dog” состоит из букв, однако я могу перевести любое число или вообще все что угодно - в строку.

.. code-block:: python

    a = 13.4;
    b = str(a); # Теперь выполнив b + “ is my number” я получу текст “13.4 is my number”


Отладка
-------

Для проверки своих программ (еще проверку называют отладкой, или дебаггингом), я использую оператор print чтобы знать что хранится в той или иной переменной.

.. code-block:: python

    print a # в python 3 может потребоваться писать print(a) в скобках

Это наипростейший и наибыстрейший способ проверить что мы уже имеем в программе и если что-то не правильно, идем обратно в код и ищем ошибку.


Массивы
-------

Массив в Python (их называют списками), их обработка и получение доступа к элементам - одна из тех особенностей Python, из-за которых этот язык программирования такой популярный.

Массив создается в квадратных скобках и может хранить абсолютно разные типы значений внутри себя.

.. code-block:: python

    a = [1,2,3,4,5]  # все просто

    b = [1, 2, 2.5, “bird”, [другой массив], еще какой то элемент, None] # прям как на Казанском вокзале - разнообразный контингент. 

Как и всегда, индексация элементов массива начинается с **НУЛЯ**. 

Чтобы получить доступ к какому либо элементу, используется та же конструкция как и в других языках

.. code-block:: python

    print b[3] # напечатает “bird”

В отличие от большинста языков программирования, работа со списками в Python это истинное удовольствие. Вот несколько примеров.

Если я хочу добавить еще один элемент к списку (в конец списка), искользуется append

.. code-block:: python

    a = [1,2,3,4,5]
    a.append(6)
    print a # [1,2,3,4,5,6]

Если я хочу удалить определенный элемент из списка, используется remove:

.. code-block:: python

    a = [1,2,3,4,5]
    a.remove(3)
    print a # [1,2,4,5]

Если я хочу посчитать, сколько у меня элементов с определенным значением, используется count:

.. code-block:: python

    a = [1,2,3,3,4,5,5,6,7,5,5]
    print a.count(5)  # 4

Если я хочу расширить список, добавив к нему другой список, я использую extend:

.. code-block:: python

    a = [1,2,3]
    b = [4,5,6]

    a.extend(b) # [1,2,3,4,5,6]

    a.append(b) # [1,2,3, [4,5,6] ]   - чувствуете разницу ?

Если я хочу сортировать список, я использую sort:

.. code-block:: python

    a = [1,5,2,3,7,5]
    a.sort()   # [1,2,3,5,5,7]

Другие возможности списков можно посмотреть в документации python


Словари
-------

Словарь в Python - это такой вид массива, когда у каждого значения есть свой ключ. Это как адресная книга, в которой мы ищем номер телефона по имени владельца а не по самому номеру.  

Словарь создается в фигурных скобках. Каждый элемент имеет вид {ключ : значение} и доступ к элементам осуществляется по ключам.

.. code-block:: python

    myDictionary = {“Roman” : 123, “Cat” : 456, “Dog” : 789}

    print myDictionary[“Roman”] # напечатает 123


Словарь, как и массив, позволяет хранить разношерстную публику внутри себя.

.. code-block:: python

    myCrazyDict = {“Roman” : 123, “Cat” : 1.4, “Dog” : “HotDog”, 115 : {Другой словарь}}

    print myCrazyDict[“Dog”] # легко выдает нам “HotDog”

Чтобы получить доступ к элементу словаря который является элементов ловаря, мы должны указать несколько ключей (своего рода карта, указывающая где что найти)

.. code-block:: python

    a = {“cat” : 13, “dog” : {“a” : 1, “b” : 2} }

    print a[“dog”][“b”] # выдаст 2


Условия
-------

Принцип создания условий в Python такой же как и в других языках прграммирования. С поправкой на синтаксис Python, а именно

* Блок условия начинается с двоеточия

* Сам код условия должен иметь отступ в 4 пробела (1 табуляция)

* При комбинировании нескольких условий используются ключевые слова or и and вместо || и &&

* Если мы хотим добавить другое условие (на случай если наше первое условие не выполнилось) - вместо else if  мы используем elif


Пример:

.. code-block:: python

    a = 13

    if a < 10:

        print "less"

    elif a > 20:

        print "more"

    else:

        print "ok"


Как и в других языках, операторы сравнения в Python выглядят та же:

.. code-block:: python

    ==	равно

    !=	не равно

    >	больше

    <	меньше

    >=	больше или равно

    <=	меньше или равно


В Python нет конструкции Switch..case. Есть разные варианты как эту конструкцию можно воспроизвести в Python, однако все сводится к if .. elif .. else

В Python присутстует конструкция while:

.. code-block:: python

    a = 1

    while w < 10:

        # какой-то код

        a += 1	 	#в Python a++ или a-- заменены на a+=1 и a-=1

Более продвинутые виды циклов называются **итераторы** и **генераторы**. 

Я уже говорил, что Python самый лучший язык программирования?  Тогда, рассмотрим очень часто встречающийся пример, когда нам нужно проверить, содержит ли текст какое то слово/букву/подтекст.  Для этого достаточно использовать in, после чего Python вернет нам результат True или False.

.. code-block:: python

    if "red bird" in "A huge red bird lives 100 years":
        print "yes"

Если мы хотим найти какие то сложные шаблоны, например не знаем сколько цифр и символов в тексте, и вообще только примерно представляем - какой текст мы хотим найти - мы используем специальный модуль re - который означает Regular Expressions. Но это уже продвинутое владение Python и всю информацию можно получить из различных источников (например https://github.com/volodinroman/potatoRoll/blob/master/handbook/python/RegEx.rst)


Циклы
-----

Как и в любом языке программирования, циклы в Python позволяют пройтись по одному и тому же участку кода несколько раз, меняя какую-то условную переменную.

Например когда нам нужно обработать каждый элемент списка, условная переменная, которая меняется в каждой новой итерации цикла, хранит в себе очередной элемент списка. 

Следуя синтаксису Python, цикл выглядит следующим образом

.. code-block:: python

    myList = [“Cat”, “Dog”, Bird”]

    for i in myList:
        print i

    Выдаст:
    Cat
    Dog
    Bird

В приеденном выше примере переменной i (которую кстати за ранее можно нигде не объявлять) присваивается очередной элемент массива.

Чтобы перейти к следующему элементу списка, мы можем использовать **continue**.

Чтобы прервать цикл, мы используем **break**.

Давайте рассмотрим небольшой пример:

.. code-block:: python

    myList = [1,2,3,4,5,6,7]

    for num in myList:

        if num == 3:

            continue

        elif num > 4:

            break

В примере выше, если мы достигли числа 3, перейти сразу же на следующий элемент. И как только элемент будет больше 4 (т.е. Когда достигнет 5) - прервать цикл.

**Лайфхак 1**: если в коде цикла нам понадобится все же узнать, какой индекс у текущего элемента, используется следующая конструкция

.. code-block:: python

    for index, i  in enumerate(myList):

        print i #напечатает сам элемент

        print index #напечатает его индекс	


**Лайфхак 2**: если списка никакого нет и нам просто нужно выполнить один и тот же участок кода, мы можем сформировать список из чисел и пройтись по нему. Причем мы можем использовать эти числа для своих вычислений.

Формирование списка числе выполняется с помощью команды range(start,end)

.. code-block:: python

    a = range(0,9) # получится список [0,1,2,3,4,5,6,7,8]

    # Цикл выполнит #code 20 раз и 20 раз напечатает очередное число из списка

    for i in range(0,20):

        # code

        print i


Функции
-------

В отличие от большинста языков программирования, работа с функциями в Python отличается своей простотой и в то же время продвинутостью. 

Напоминаю что функции мы используем по разным причинам, главная - это повторное использование функций с новыми входящими условиями (аргументами) и получение различных результатов. Другая причина - выделение участка кода и заключение его в функцию позволяет визуально разделить программу на составные компоненты, что в дальнейшем значительно упрощаем работу программиста.

Чтобы создать функцию в Python, мы используем ключевое слово def

.. code-block:: python

    def myFunction():

        #code

Все! :D

Чтобы создать функцию с аргументами, мы должны указать эти аргументы в скобках. Так же мы можем указать значения аргументов по умолчанию. Это делается для того, чтобы при вызове функции мы не описывали каждый раз все аргументы. Приведу пример.

.. code-block:: python

    def myFoo(a, b, c):

        print a

В примере выше мы создали функцию myFoo и указали что у функции три аргумента. Однако теперь, чтобы вызвать нашу функцию, мы должны назначить всем трем аргументам какие-то значения:

.. code-block:: python

    myFoo(a = “dog”, b = “cat”, c = “bird”)

Но что делать, если у нас при вызове myFoo некоторые аргументы практически всегда имеют одни и те же значение, например “c” всегда будет “bird” и в редких случаях что-то еще. Как вариант, мы можем аргументам назначить значение по умолчанию, и если мы будем вызывать эту функцию, нам лишь нужно будет передать новые значения некоторых аргументов.

.. code-block:: python

    def myFoo(a = 1, b = “cat”, c = None):

        print a, b, c

    myFoo()
    myFoo(b = “dog”)
    myFoo(a = 23, c = “cat”)


Поскольку каждая функция, должна в итоге возвращать какое то значение (чтобы мы могли, например, присвоить переменной функцию), мы используем ключевое слово return и далее что мы хотим возвратить. Например:

.. code-block:: python

    def myFormula(x=1, y=1, z=1):

        result = (x + y)/(y + z)

        return result  # функция, которая возвращает значение - это правило хорошего тона программирования


    a = myFormula(x = 3, y = 13, z = 20)

    print a


Мы можем возвратить как одно так и несколько значений любого типа (абсолютно любого, даже другую функцию). Только несколько значений должны быть уже заключены в квадратные скобки, чтобы return все же вернул один элемент, но как массив, содержащий кучу элементов внутри себя.

.. code-block:: python

    return [“a”, 1, str(1.4), someFoo(), <<Some Crazy Thing>>, [“array”, “of”,  “crazy”, “things], {dict} ]


Try...Except
------------

В любом языке как и в Python есть такая конструкция как try...except. Представьте себе ситуацию что вы написали код, и вы не уверены что он всегда будет выполняться корректно. Скажем, функция при определенных аргументах работает, при других - выдает ошибку (например где-то свершилось деление на ноль). И в сложных программах мы не можем учесть все нюансы, а иногда и не можем объяснить почему сегодня программа работает а завтра нет. В таких случаях мы используем данную конструкцию.

Её структура следующая:

.. code-block:: python

    try:
        # some code
    except:
        # another code (if try has some error)

И звучит это примерно так:

.. code-block:: python

    Попытаться выполнить код:
        сам код
    Иначе, если попытка не удалась, выполнить код:
        другой код

Хороший пример - если мы с помощью Python попытались считать информацию из файла (текстового или другого) указав заранее путь к файлу - а файла там и не оказалось, это должно привести к ошибке, т.к. мы не писали кучу тестов как "существует ли файл", "нужного ли формата файл" и т.д. Таким образом try спасет нас. 

.. code-block:: python

    try:
        read_file(path_to_file)
    except:
        print "file doesn't exists in file system"

Однако следует помнить что слишком частое использование try ... else не рекомендуется. Это не поможет нам найти ошибку поскольку Python банально пропустит весь код в try, и перейдет в except.

Есть еще третье дополнительное состояние, называется **finally**, и этот блок запустится независимо от того, была ли ошибка в try или нет.

.. code-block:: python

    try:
        #some code
    except:
        #another code
    finally:
        #code that will be executed anyway
