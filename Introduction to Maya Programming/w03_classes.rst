Классы 
=======

  *Python получил свое название не от змеи питона, а в честь комедийного шоу Monty Python and the holy grail, который вышел в Британском кино-прокате в 1975 году и фанатом которого являлется Guido van Rossum - создатель языка программирования Python и который на данный момент работает в компании Dropbox (до этого работал в Google)*

Во многих языках программирования есть такая вещь как Классы. Если помните, я говорил, что любую программу следует "дробить" на более мелкие компоненты - функции. Дробление на функции это очень важный момент в программировании - ведь оно позволяет преобразовать программу в более организованный вид. Одни и те же функции можно использовать много раз, с разными аргументами - получая различные результаты.  И функции  - это прекрасно ... пока речь идет о небольших программах. Однако, когда древние программисты (еще те, что при царях жили) столкнулись с такой проблемой, как организация сложных программ, состоящих из кучи файлов и огромного числа строк кода - они осознали всю примитивность функций, и решили придумать новый способ организации кода, который бы позволил держать в голове под контролем весь проект. 

Они сидели долго, спорили о жизни, обществе, политике, крестьянах, драконах, мироздании и эволюции, пока не начали драться и называть друг друга холопами, собаками и крысами и говорили (скорее орали) друг другу, мол, не лезть туда, где ничего не смыслишь. В конце концов, придумали они для организации функций - **Классы**, каждый из который отвечал бы за определенный набор действий, и чтобы эти классы обменивались своими функциями между собой, не могли навредить друг другу, и в программе царили бы гармония и процветание. Назвали они это нововведение - Объектно Ориентированное Программирование (или ООП), описали как должны работать Классы и выпустили классы в массы, ознаменовав этим событием новую эру программирования. 

В Python заложен весь необходимый функционал, чтобы мы могли создавать и полностью контролировать классы. В основном все программисты работают именно с классами а не с отдельными функциями, т.к. их гибкость позволяет создавать очень сложные взаимосвязи между программами легко и непринужденно. Фреймворк Qt, который используется для создания интерфейсов любой сложности, так же работает с помощью классов. 


.. figure:: res/classes.jpg
    :align: left
    :alt: alternate text
    :figclass: align-center



Введение
--------

Чтобы проще понять, что такое классы - рассмотрим простой пример.

Представьте город, в котором живут одни повара да их помощники. Они добывают еду, готовят ее, готовят соусы и приправы, одним словом, знают все что касается еды и количество жителей этого города неограничено. В другом городе, рядом, живут одни доктора, которые знаю все про болезни и методы лечения от этих болезней. Третий город - войны и солдаты, знают все премудрости ведения сражений. Четвертый город - инженеры. И так далее. 

И теперь, представьте, что вам доверили создать город, который занимался бы созданием автомобилей. Любой город, безусловно, не может существовать без врачей, учителей, инженеров, политиков - поэтому мы с каждого вышеописанного города берем себе по человеку, который несет в себе все знания своего города. Одного учителя, одного инженера, повара, но мы берем людей не со всех городов, а лишь с тех, чьи знания и опыт позволят нам построить наш автомобилестроительный город. Нам не нужны специалисты по летучим мышам или по выращиванию кофе. Они не принесут никакой пользы. Поскольку автомобилестроением никто из выше перечисленных городов не занимается - мы должны дать им инструкции, как делать колеса, как собирать трансмиссию, двигатель и т.д. И вот у нас уже есть свой город где живут специалисты по автомобилям, которые несут в себе все знания предыдущих городов из которых они пришли, а так же знания нашего города. Теперь, если какому-то новому городу понадобится построить автомобиль, мы выдадим ему своего специалиста. 

А теперь змените города на классы, то что жители этих городов обучены делать - на функции этих классов, а сами жители - это объекты классов. 

Классы это просто еще один вид организации кода, когда функции объединяются в группы с каким-то названием. Они позволяют структурировать код так, чтобы нам было интуитивно понятно и приятно с ним работать.

Практические заметки
--------------------

Рассмотрим пример класса Повара, который, как описано выше, умеет делать все что связано с едой и ее готовкой.

.. code-block:: python

    class Cook():

        def fry(self, food = None):
            print (food + " has been fried")

        def boil(self, food = None):
            print (food + " has been boiled")

        def grill(self, food = None):
            print (food + "has been grilled")